#!/usr/bin/env python

import os

env = Environment(
        toolpath=['{{ toolpath }}'],
%% if platform in ["stm32"]
        tools=[
            'compiler_arm_none_eabi_gcc',
            'settings_buildpath',
            'utils_buildformat',
            'utils_buildsize',
            ],
        CPU="{{ core }}",
        CFLAGS_language=['-std=gnu99'],
        LINKFLAGS_optimize=[
            "-Wl,--relax",
            "-Wl,--gc-sections",
            "-Wl,-wrap,_malloc_r",
            "-Wl,-wrap,_calloc_r",
            "-Wl,-wrap,_realloc_r",
            "-Wl,-wrap,_free_r",
            "--specs=nano.specs",
            "-nostartfiles",
            ],
        ENV=os.environ)

#env.Append(CCFLAGS_warning=['-Werror'])
env.Append(LINKFLAGS_other=['-Wl,--no-wchar-size-warning'])
env.Append(LINKFLAGS_target=[
	"-Llink",
    "-Tlinkerscript.ld",
    ])
%% elif platform in ["avr"]
        tools=[
            'compiler_avr_gcc',
            'settings_buildpath',
            'utils_buildformat',
            'utils_buildsize',
            ],
        CCFLAGS_target=[
            '-mmcu={{ partname }}',
            '-DF_CPU=16000000',
            ],
        CFLAGS_language=['-std=gnu99'],
        LINKFLAGS_other=[
            "-Wl,--fatal-warnings",
            ],
        ENV=os.environ)
%% elif platform in ["hosted"]
        tools=[
            'compiler_hosted_gcc',
            'settings_buildpath',
            'utils_buildformat',
            'utils_buildsize',
            ],
        CXXFLAGS_language=[
            '-std=c++11',
            ],
        ENV=os.environ)
%% endif

env.RemoveFromList('CCFLAGS_warning', [
    '-Wshadow',
    '-Wcast-align',
    '-Wmissing-declarations',
    '-Wcast-qual',
    '-Wredundant-decls',])
env.RemoveFromList('CXXFLAGS_warning', [
    '-Wold-style-cast',
    '-Wnon-virtual-dtor'])

env['BASEPATH']  = os.path.abspath('.')
env['BUILDPATH'] = os.path.abspath('build')

library = env.SConscript("SConscript", exports="env")

files = env.Glob("*.cpp")
program = env.Program(target='project.elf', source=files)

env.Alias('size', env.Size(program))
env.Alias('symbols', env.Symbols(program))

hexfile = env.Hex(program)

env.Alias('build', [hexfile, env.Listing(program)])
env.Alias('all', ['build', 'size'])

env.Default('build')

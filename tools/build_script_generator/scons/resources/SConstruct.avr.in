#!/usr/bin/env python

import os

env = Environment(
        toolpath=['{{ toolpath }}'],
        tools=[
            'compiler_avr_gcc',
            'settings_buildpath',
            'utils_buildformat',
            'utils_buildsize',
            ],
        CCFLAGS_target=[
            '-mmcu={{ partname }}',
            '-DF_CPU=16000000',
            ],
        CFLAGS_language=['-std=gnu99'],
        LINKFLAGS_other=[
            "-Wl,--fatal-warnings",
            ],
        ENV=os.environ)

env.RemoveFromList('CCFLAGS_warning', [
    '-Wshadow',
    '-Wcast-align',
    '-Wmissing-declarations',
    '-Wcast-qual',
    '-Wredundant-decls',])
env.RemoveFromList('CXXFLAGS_warning', [
    '-Wold-style-cast',
    '-Wnon-virtual-dtor'])
env.Append(CCFLAGS_warning=['-Werror'])

env['BASEPATH']  = os.path.abspath('.')
env['BUILDPATH'] = os.path.abspath('build')

env.Append(CPPPATH=[
    'src',
    "src/stdc++",
    'ext',
])

files = env.Glob("*.cpp")
files += [
%% for file in files
    env.File("{{ file }}"),
%% endfor
]

program = env.Program(target='project.elf', source=files)

env.Alias('size', env.Size(program))
env.Alias('symbols', env.Symbols(program))

hexfile = env.Hex(program)

env.Alias('build', [hexfile, env.Listing(program)])
env.Alias('all', ['build', 'size'])

env.Default('build')

#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# Copyright (c) 2010-2011, Fabian Greif
# Copyright (c) 2012, Sascha Schade
# Copyright (c) 2012-2015, Niklas Hauser
# Copyright (c) 2016, Daniel Krebs
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

Import('env')

generator = env['TemplateGenerator'](env, './')

table = [(2.2,  7, 256),
		 (2.2,  8, 256),
		 (2.2, 10, 256),
		 (2.2, 12, 256),
		 (2.2, 16, 256)]

for gamma, bit, length in table:
	# specifies how many values are written per line
	values_per_line = 16

	# check which type width is needed
	if bit <= 8:
		type = "uint8_t"
	else:
		type = "uint16_t"

	string = ""

	for index in range(length):
		# generate the value for the index
		value = int(( (2 ** bit - 1) / ((length - 1) ** gamma)) * (index ** gamma))

		# 0 only on index 0, otherwise at least 1
		if index != 0 and index != length-1 and int(value) == 0:
			value = 1

		# format it nicely
		if bit <= 8:
			string = string + "0x%02x," % value
		elif bit <= 12:
			string = string + "0x%03x," % value
		else:
			string = string + "0x%04x," % value

		# add a newline, but not on the last line
		if (index + 1) % values_per_line == 0 and index != length-1:
			string = string + '\n'

	# remove trailing comma
	string = string[:-1]

	substitutions = {
		'gamma': int(10 * gamma),
		'type': type,
		'bit': bit,
		'length': length,
		'table': string,
	}

	generator.template('table%i_%i.cpp' % (bit, length), 'table.cpp.in', substitutions)


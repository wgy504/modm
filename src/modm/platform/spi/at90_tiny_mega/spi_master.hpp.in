/*
 * Copyright (c) 2013-2017, Niklas Hauser
 * Copyright (c) 2014, Sascha Schade
 * Copyright (c) 2017, Fabian Greif
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_AVR_SPI_MASTER{{ id }}_HPP
#define MODM_AVR_SPI_MASTER{{ id }}_HPP

#include <avr/io.h>

#include <modm/architecture/interface/spi_master.hpp>
#include <modm/platform/gpio/connector.hpp>


#include "spi{{ id }}.hpp"

namespace modm
{

namespace platform
{

/**
 * Implementation of the SpiMaster.
 *
 * The fast SPI clock speeds make it unreasonable to use an interrupt
 * based approach to shifting out each byte of the data, since the interrupt
 * handling might decrease performance over busy waiting especially for
 * targets operating at low CPU frequencies.
 * Therefore the asynchronous methods are implemented synchronously.
 *
 * @warning	When the !SS pin is configured in input mode and pulled low, the
 *			hardware will switch into SPI slave mode. It is therefore necessary
 *			to configure the pin either in output mode or to pull it high.
 *
 * @ingroup		{{partname}}_spi
 * @author		Niklas Hauser
 */
class SpiMaster{{ id }} : public ::modm::SpiMaster, private Spi
{
	static uint8_t state;
	static void *context;
	static ConfigurationHandler configuration;
public:
	/// Spi Data Mode, Mode0 is the most common mode
	enum class
	DataMode : uint8_t
	{
		Mode0 = 0,	///< clock normal,   sample on rising  edge
		Mode1 = (1 << CPOL{{ id }}),	///< clock normal,   sample on falling edge
		Mode2 = (1 << CPHA{{ id }}),	///< clock inverted, sample on rising  edge
		Mode3 = (1 << CPOL{{ id }}) | (1 << CPHA{{ id }}),	///< clock inverted, sample on falling edge
	};

public:
	// start documentation inherited
	template< template<Peripheral _> class... Signals >
	static void
	connect()
	{
		using Connector = GpioConnector<Peripheral::Spi{{ id }}, Signals...>;
		using Sck = typename Connector::template GetSignal<Gpio::Signal::Sck>;
		using Mosi = typename Connector::template GetSignal<Gpio::Signal::Mosi>;
		using Miso = typename Connector::template GetSignal<Gpio::Signal::Miso>;
		static_assert(Connector::template IsValid<Sck> and Connector::template IsValid<Mosi> and
					  ((not Connector::template IsValid<Miso> and sizeof...(Signals) == 2) or
					   (    Connector::template IsValid<Miso> and sizeof...(Signals) == 3)),
					  "UartSpiMaster{{id}}::connect() requires one Sck and one Mosi and optionally one Miso signal!");

		// Connector::disconnect();
		Sck::setOutput(Gpio::OutputType::PushPull);
		Mosi::setOutput(Gpio::OutputType::PushPull);
		Miso::setInput(Gpio::InputType::Floating);
		Connector::connect();
	}

	template< class SystemClock, uint32_t baudrate,
			uint16_t tolerance = modm::Tolerance::FivePercent >
	static inline void
	initialize()
	{
		// calculate the nearest prescaler from the baudrate
		constexpr float desired = float(SystemClock::Spi) / baudrate;
		constexpr uint8_t nearest = (
				(desired >= ( 64 * 4.f/3)) ? 128 : (
				(desired >= ( 32 * 4.f/3)) ?  64 : (
				(desired >= ( 16 * 4.f/3)) ?  32 : (
				(desired >= (  8 * 4.f/3)) ?  16 : (
				(desired >= (  4 * 4.f/3)) ?   8 : (
				(desired >= (  2 * 4.f/3)) ?   4 :
											   2
				))))));

		// check if we found a prescaler which generates a baudrate within the tolerance
		assertBaudrateInTolerance<
				SystemClock::Spi / nearest,
				baudrate,
				tolerance >();

		// translate the prescaler into the bitmapping
		constexpr Prescaler prescaler = (
				(nearest >= 128) ? Prescaler::Div128 : (
				(nearest >=  64) ? Prescaler::Div64  : (
				(nearest >=  32) ? Prescaler::Div32  : (
				(nearest >=  16) ? Prescaler::Div16  : (
				(nearest >=   8) ? Prescaler::Div8   : (
				(nearest >=   4) ? Prescaler::Div4   :
								   Prescaler::Div2
				))))));

		initialize(prescaler);
	}


	static void
	setDataMode(DataMode mode)
	{
		SPCR{{ id }} = (SPCR{{ id }} & ~((1 << CPOL{{ id }}) | (1 << CPHA{{ id }}))) | static_cast<uint8_t>(mode);
	}

	static void
	setDataOrder(DataOrder order)
	{
		if (order == DataOrder::LsbFirst) {
			SPCR{{ id }} |= (1 << DORD{{ id }});
		} else {
			SPCR{{ id }} &= ~(1 << DORD{{ id }});
		}
	}


	static uint8_t
	acquire(void *ctx, ConfigurationHandler handler = nullptr);

	static uint8_t
	release(void *ctx);


	static uint8_t
	transferBlocking(uint8_t data)
	{
%% if options["busywait"]
		return transfer(data).getResult();
%% else
		return RF_CALL_BLOCKING(transfer(data));
%% endif
	}

	static void
	transferBlocking(uint8_t *tx, uint8_t *rx, std::size_t length)
	{
%% if options["busywait"]
		transfer(tx, rx, length);
%% else
		RF_CALL_BLOCKING(transfer(tx, rx, length));
%% endif
	}


	static modm::ResumableResult<uint8_t>
	transfer(uint8_t data);

	static modm::ResumableResult<void>
	transfer(uint8_t *tx, uint8_t *rx, std::size_t length);
	// end documentation inherited

protected:
	static void
	initialize(Prescaler prescaler);
};

} // namespace platform

} // namespace modm

#endif // MODM_AVR_SPI_MASTER_HPP

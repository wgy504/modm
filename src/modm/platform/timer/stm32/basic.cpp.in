/*
 * Copyright (c) 2009, Martin Rosekeit
 * Copyright (c) 2009-2012, 2016, Fabian Greif
 * Copyright (c) 2011, Georgi Grinshpun
 * Copyright (c) 2013, Kevin Laeufer
 * Copyright (c) 2014-2016, Niklas Hauser
 * Copyright (c) 2014, Sascha Schade
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include "timer_{{ id }}.hpp"

void
modm::stm32::Timer{{ id }}::enable()
{
	// enable clock
	RCC->APB1ENR{{ apb_post }}  |=  RCC_APB1ENR{{ apb_post }}_TIM{{ id }}EN;
	// reset timer
	RCC->APB1RSTR{{ apb_post }} |=  RCC_APB1RSTR{{ apb_post }}_TIM{{ id }}RST;
	RCC->APB1RSTR{{ apb_post }} &= ~RCC_APB1RSTR{{ apb_post }}_TIM{{ id }}RST;
}

void
modm::stm32::Timer{{ id }}::disable()
{
	// disable clock
	RCC->APB1ENR{{ apb_post }} &= ~RCC_APB1ENR{{ apb_post }}_TIM{{ id }}EN;

	TIM{{ id }}->CR1 = 0;
	TIM{{ id }}->DIER = 0;
}

void
modm::stm32::Timer{{ id }}::setMode(Mode mode)
{
	// ARR Register is buffered, only Under/Overflow generates update interrupt
	TIM{{ id }}->CR1 = TIM_CR1_ARPE | TIM_CR1_URS | static_cast<uint32_t>(mode);
	TIM{{ id }}->CR2 = 0;
}

%% if (id == 6) and (target["family"] in ["f2", "f3", "f4", "f7", "l4"]) and not partname.startswith("stm32f412")
%%   set interrupt_vector = "TIM6_DAC_IRQn"
%% elif (id == 7) and ((target["name"] in ["328", "334"]) or (target["name"] in ["303"] and target["size"] in ["8"]))
%%   set interrupt_vector = "TIM7_DAC2_IRQn"
%% elif (id == 18) and (target["family"] == "f3" and target["name"] in ["373", "378"])
%%   set interrupt_vector = "TIM18_DAC2_IRQn"
%% else
%%   set interrupt_vector = "TIM" ~ id ~ "_IRQn"
%% endif
void
modm::stm32::Timer{{ id }}::enableInterruptVector(bool enable, uint32_t priority)
{
	if (enable) {
		// Set vector priority
		NVIC_SetPriority({{ interrupt_vector }}, priority);
		// register IRQ at the NVIC
		NVIC_EnableIRQ({{ interrupt_vector }});
	}
	else {
		NVIC_DisableIRQ({{ interrupt_vector }});
	}
}

/*
 * Copyright (c) 2009, Martin Rosekeit
 * Copyright (c) 2009-2012, 2016-2017, Fabian Greif
 * Copyright (c) 2011-2012, Georgi Grinshpun
 * Copyright (c) 2013, 2016, Kevin LÃ¤ufer
 * Copyright (c) 2014, Sascha Schade
 * Copyright (c) 2014, 2016-2017, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

%% if target["family"] in ["l4"]
%%   if id in range(2,8)
%%     set apb  = "APB1"
%%     set apb_post = "1"
%%   elif id in [1,8] or id in [15,16,17]
%%     set apb = "APB2"
%%     set apb_post = ""
%%   else
       #error "Don't know on which APB this timer {{ id }} is."
%%   endif
%% else
%%   if id in range(9,12) or id in range(15,21)
%%     set apb = "APB2"
%%   elif id in range(1,9) or id in range (12,15)
%%     set apb = "APB1"
%%   else
       #error "Don't know on which APB this timer {{ id }} is."
%%   endif
%% endif

%% if (target["family"] == "f3" and target["name"] in ["73", "78"]) or target["family"] == "f0"
%%   set irq_name = id
%% else
%%   if id == 9
%%     set irq_name = "1_BRK_TIM9"
%%   elif id == 10
%%     set irq_name = "1_UP_TIM10"
%%   elif id == 11
%%     set irq_name = "1_TRG_COM_TIM11"
%%   elif id == 12
%%     set irq_name = "8_BRK_TIM12"
%%   elif id == 13
%%     set irq_name = "8_UP_TIM13"
%%   elif id == 14 and not target["family"] == "f0"
%%     set irq_name = "8_TRG_COM_TIM14"
%%   elif id == 15
%%     set irq_name = "1_BRK_TIM15"
%%   elif id == 16
%%     set irq_name = "1_UP_TIM16"
%%   elif id == 17
%%     set irq_name = "1_TRG_COM_TIM17"
%%   elif id == 20
%%     set irq_name = "20_UP"
%%   else
%%     set irq_name = id
%%   endif
%% endif

#include "timer_{{ id }}.hpp"

// ----------------------------------------------------------------------------
void
modm::platform::Timer{{ id }}::clockEnable()
{
	// enable clock
	RCC->{{ apb }}ENR{{ apb_post }}  |=  RCC_{{ apb }}ENR{{ apb_post }}_TIM{{ id }}EN;
}

void
modm::platform::Timer{{ id }}::enable()
{
	// enable clock
	RCC->{{ apb }}ENR{{ apb_post }}  |=  RCC_{{ apb }}ENR{{ apb_post }}_TIM{{ id }}EN;

	// reset timer
	RCC->{{ apb }}RSTR{{ apb_post }} |=  RCC_{{ apb }}RSTR{{ apb_post }}_TIM{{ id }}RST;
	RCC->{{ apb }}RSTR{{ apb_post }} &= ~RCC_{{ apb }}RSTR{{ apb_post }}_TIM{{ id }}RST;
}

void
modm::platform::Timer{{ id }}::disable()
{
	// disable clock
	RCC->{{ apb }}ENR{{ apb_post }} &= ~RCC_{{ apb }}ENR{{ apb_post }}_TIM{{ id }}EN;

	TIM{{ id }}->CR1 = 0;
	TIM{{ id }}->DIER = 0;
	TIM{{ id }}->CCER = 0;
}

// ----------------------------------------------------------------------------
void
modm::platform::Timer{{ id }}::setMode(Mode mode, SlaveMode slaveMode,
		SlaveModeTrigger slaveModeTrigger, MasterMode masterMode,
		bool enableOnePulseMode)
{
	// disable timer
	TIM{{ id }}->CR1 = 0;
	TIM{{ id }}->CR2 = 0;

	%% if id != 9 and id != 12
	if (slaveMode == SlaveMode::Encoder1 || \
		slaveMode == SlaveMode::Encoder2 || \
		slaveMode == SlaveMode::Encoder3)
	{
		// Prescaler has to be 1 when using the quadrature decoder
		setPrescaler(1);
	}
	%% endif

	// ARR Register is buffered, only Under/Overflow generates update interrupt
	if (enableOnePulseMode) {
		TIM{{ id }}->CR1 = TIM_CR1_ARPE | TIM_CR1_URS | TIM_CR1_OPM
										| static_cast<uint32_t>(mode);
	} else {
		TIM{{ id }}->CR1 = TIM_CR1_ARPE | TIM_CR1_URS
										| static_cast<uint32_t>(mode);
	}
	TIM{{ id }}->CR2 = static_cast<uint32_t>(masterMode);
	TIM{{ id }}->SMCR = static_cast<uint32_t>(slaveMode)
						| static_cast<uint32_t>(slaveModeTrigger);
}

// ----------------------------------------------------------------------------
void
modm::platform::Timer{{ id }}::configureInputChannel(uint32_t channel,
		InputCaptureMapping input, InputCapturePrescaler prescaler,
		InputCapturePolarity polarity, uint8_t filter,
		bool xor_ch1_3)
{
	channel -= 1;	// 1..4 -> 0..3

	// disable channel
	TIM{{ id }}->CCER &= ~((TIM_CCER_CC1NP | TIM_CCER_CC1P | TIM_CCER_CC1E) << (channel * 4));

	uint32_t flags = static_cast<uint32_t>(input);
	flags |= static_cast<uint32_t>(prescaler) << 2;
	flags |= (static_cast<uint32_t>(filter) & 0xf) << 4;

	if (channel <= 1)
	{
		uint32_t offset = 8 * channel;

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR1 & ~(0xff << offset);

		TIM{{ id }}->CCMR1 = flags;

		if(channel == 0) {
			if(xor_ch1_3)
				TIM{{ id }}->CR2 |= TIM_CR2_TI1S;
			else
				TIM{{ id }}->CR2 &= ~TIM_CR2_TI1S;
		}
	}
	else {
		uint32_t offset = 8 * (channel - 2);

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR2 & ~(0xff << offset);

		TIM{{ id }}->CCMR2 = flags;
	}

	TIM{{ id }}->CCER |=
		(TIM_CCER_CC1E | static_cast<uint32_t>(polarity)) << (channel * 4);
}

// ----------------------------------------------------------------------------
void
modm::platform::Timer{{ id }}::configureOutputChannel(uint32_t channel,
		OutputCompareMode_t mode, Value compareValue, PinState out)
{
	channel -= 1;	// 1..4 -> 0..3

	// disable channel
	TIM{{ id }}->CCER &= ~((TIM_CCER_CC1NP | TIM_CCER_CC1P | TIM_CCER_CC1E) << (channel * 4));

	setCompareValue(channel + 1, compareValue);

	// enable preload (the compare value is loaded at each update event)
	uint32_t flags = mode.value | TIM_CCMR1_OC1PE;

	if (channel <= 1)
	{
		uint32_t offset = 8 * channel;

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR1 & ~(0xff << offset);

		TIM{{ id }}->CCMR1 = flags;
	}
	else {
		uint32_t offset = 8 * (channel - 2);

		flags <<= offset;
		flags |= TIM{{ id }}->CCMR2 & ~(0xff << offset);

		TIM{{ id }}->CCMR2 = flags;
	}

	if (mode != OutputCompareMode::Inactive && out == PinState::Enable) {
		TIM{{ id }}->CCER |= (TIM_CCER_CC1E) << (channel * 4);
	}
}

// ----------------------------------------------------------------------------
void
modm::platform::Timer{{ id }}::enableInterruptVector(bool enable, uint32_t priority)
{
	if (enable) {
		// Set priority for the interrupt vector
		NVIC_SetPriority(TIM{{ irq_name }}_IRQn, priority);

		// register IRQ at the NVIC
		NVIC_EnableIRQ(TIM{{ irq_name }}_IRQn);
	}
	else {
		NVIC_DisableIRQ(TIM{{ irq_name }}_IRQn);
	}
}

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2017, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
# Copyright (c) 2017, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

def port_ranges(gpios):
    ports = {p: (8, 0) for p in set([p["port"] for p in gpios])}
    for gpio in gpios:
        pin = int(gpio["pin"])
        pmin, pmax = ports[gpio["port"]]
        ports[gpio["port"]] = (min(pin, pmin), max(pin, pmax))

    ports = [{"name": k.upper(), "start": v[0], "width": v[1] - v[0] + 1} for k,v in ports.items()]
    return ports

def get_driver(s):
    name = s["driver"].capitalize()
    if "instance" in s: name += s["instance"].capitalize();
    return name

def get_name(s):
    return s["name"].capitalize()

def extract_signals(signals):
    afs = {}
    for s in signals:
        driver = get_driver(s)
        if "Exint" in driver: continue;
        name = get_name(s)
        if name.isdigit():
            if "Adc" in driver:
                name = "In" + name
        key = driver + name
        afs[key] = {"driver": driver, "name": name}
    return afs

def init(module):
    module.name = "gpio"
    module.parent = "platform"

def prepare(module, options):
    if not options[":target"].has_driver("gpio:avr"):
        return False

    # port.hpp depends on modm::bitReverse()!
    module.depends(":platform:core", ":platform:gpio.common", ":math")
    return True

bprops = {}
def pre_build(env):
    device = env[":target"]
    driver = device.get_driver("gpio")

    all_signals = {}
    for gpio in driver["gpio"]:
        key = gpio["port"] + gpio["pin"]
        # deal with all signals
        signals = gpio["signal"] if "signal" in gpio else []
        extracted_signals = extract_signals(signals)
        all_signals.update(extracted_signals)
        signal_names = set(s["name"] for s in extracted_signals.values())
        extracted_signals = {name: [s for s in extracted_signals.values() if s["name"] == name] for name in signal_names}
        # extract information on external interrupts
        exints = list(filter(lambda p: p["driver"] == "exint", signals))
        pcint = list(filter(lambda p: "name" in p and p["name"] == "pcint", exints))
        extint = list(filter(lambda p: "name" not in p, exints))
        bprops[key] = {
            "gpio": gpio,
            "pcint": int(pcint[0]["channel"]) if len(pcint) else -1,
            "extint": int(extint[0]["channel"]) if len(extint) else -1,
            "signals": extracted_signals
        }

    if not len(all_signals):
        env.log.error("The device file for '{}' does not contain any signals!".format(device.partname))

    # check if any signal names start with a digit
    faults = [(af["driver"], af["name"]) for af in all_signals.values() if af["name"].isdigit()]
    if len(faults):
        raise PreBuildException("These signal names are starting with a digit!\n{}".format(
                ", ".join(["{}::{}".format(d, n) for (d, n) in faults])))

    bprops["all_peripherals"] = sorted(list(set(s["driver"] for s in all_signals.values())))
    bprops["all_signals"] = sorted(list(set(s["name"] for s in all_signals.values())))
    bprops["ranges"] = port_ranges(driver["gpio"])
    bprops["ports"] = sorted([p["name"] for p in bprops["ranges"]])

def build(env):
    device = env[":target"]
    driver = device.get_driver("gpio")
    properties = device.properties
    properties["target"] = target = device.identifier
    properties["partname"] = device.partname
    properties["driver"] = driver
    properties.update(bprops)

    if (target["family"] == "mega" and target["name"] in ["8", "16", "32", "64", "128", "162", "8515", "8535"]) or \
            (target["family"] == "tiny" and target["name"] in ["26"]):
        properties["notoggle"] = True
    else:
        properties["notoggle"] = False

    if target["family"] == "tiny" and target["name"] in ["4", "5", "9", "10", "20", "40", "828", "1634"]:
        properties["pue"] = True
    else:
        properties["pue"] = False

    if (target["family"] == "mega" and target["name"] in ["8", "16", "32", "162", "8515", "8535"]) or \
            (target["family"] == "tiny" and target["name"] in ["13", "24", "25", "44", "45", "84", "85", "261", "461", "861"]):
        properties["eicra"] = "MCUCR"
    else:
        properties["eicra"] = "EICRA"

    if target["family"] == "mega" and target["name"] in ["8", "16", "32", "8515", "8535"]:
        properties["isc2"] = "MCUCSR"
    if target["family"] == "mega" and target["name"] in ["162"]:
        properties["isc2"] = "EMCUCR"

    env.substitutions = properties
    env.outbasepath = "src/modm/platform/gpio"

    for gpio in driver["gpio"]:
        po, pi = gpio["port"], gpio["pin"]
        properties.update(bprops[po + pi])
        header_name = "gpio_{}{}.hpp".format(po.upper(), pi)
        env.template("pin.hpp.in", header_name)

    env.copy("define.h")
    env.template("base.hpp.in")
    env.template("port.hpp.in")
    env.template("unused.hpp.in")

/*
 * Copyright (c) 2017, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_AVR_GPIO_PORT_HPP
#define MODM_AVR_GPIO_PORT_HPP

#include "base.hpp"
#include <modm/math/utils/bit_operation.hpp>

/**
 * @ingroup 	platform
 * @defgroup	{{partname}}
 */

/**
 * @ingroup 	{{partname}}
 * @defgroup	{{partname}}_gpio GPIO
 */


namespace modm
{

namespace platform
{

/// @cond
// forward declaration for GpioPort
template< Gpio::Port Port, uint8_t StartPin, uint8_t Width, GpioPort::DataOrder PortOrder >
class GpioPortBase;
/// @endcond

/**
 * Creates a hardware port with StartPin as LSB and with Width.
 *
 * @tparam	StartPin	a Gpio pin
 * @tparam	Width		required width of the port (up to 8)
 * @ingroup {{partname}}_gpio
 */
template< class StartPin, uint8_t Width, ::modm::GpioPort::DataOrder PortOrder = GpioPort::DataOrder::Normal >
class GpioPort : public ::modm::GpioPort, /** @cond */ public GpioPortBase< StartPin::port, StartPin::pin, Width, PortOrder > /** @endcond */
{
public:
	static constexpr uint8_t width = Width;

	static constexpr DataOrder
	getDataOrder()
	{ return PortOrder; }

	using PortType = uint8_t;

#ifdef __DOXYGEN__
	static void
	setOutput();

	static void
	setInput();

	static PortType
	read();

	static void
	write(PortType data);

	static void
	toggle();
#endif
};

/// @cond
%% for port in ranges
template< uint8_t StartPin, uint8_t Width, ::modm::GpioPort::DataOrder PortOrder >
class GpioPortBase<Gpio::Port::{{port["name"]}}, StartPin, Width, PortOrder> : public Gpio
{
	static_assert(StartPin < {{port["start"] + port["width"]}},
			"StartPin too large, maximum {{port["start"] + port["width"] - 1}}.");
	static_assert(Width <= {{port["width"]}},
			"Width too large, maximum {{port["width"]}}.");
	static_assert(Width > 0,
			"Width should be at least 1.");
	static_assert(StartPin + Width <= {{port["start"] + port["width"]}},
			"StartPin + Width too large, maximum {{port["start"] + port["width"]}}.");

	static constexpr uint8_t dataMask = (1 << Width) - 1;
	static constexpr uint8_t portMask = dataMask << StartPin;

public:
	modm_always_inline static void setOutput() {
		DDR{{port["name"]}} |= portMask;
	}
	modm_always_inline static void setInput() {
		DDR{{port["name"]}} &= ~portMask;
	}
	inline static uint8_t read() {
		uint8_t data = PIN{{port["name"]}} & portMask;
		return (data >> StartPin);
	}
	inline static void write(uint8_t data) {
		data <<= StartPin;
		PORT{{port["name"]}} = (PORT{{port["name"]}} & ~portMask) | (data & portMask);
	}
	modm_always_inline static void toggle() {
	%% if notoggle
		PORT{{port["name"]}} ^= portMask;
	%% else
		PIN{{port["name"]}} = portMask;
	%% endif
	}
};
// another specialization for DataOrder::Reversed
template< uint8_t StartPin, uint8_t Width >
class GpioPortBase<Gpio::Port::{{port["name"]}}, StartPin, Width, ::modm::GpioPort::DataOrder::Reversed> : public Gpio
{
	static_assert(StartPin < {{port["start"] + port["width"]}},
			"StartPin too large, maximum {{port["start"] + port["width"] - 1}}.");
	static_assert(Width <= {{port["width"]}},
			"Width too large, maximum {{port["width"]}}.");
	static_assert(Width > 0,
			"Width should be at least 1.");
	static_assert(StartPin + Width <= {{port["start"] + port["width"]}},
			"StartPin + Width too large, maximum {{port["start"] + port["width"]}}.");

	static constexpr uint8_t StartPinReversed = (4 - StartPin - Width) + 4;
	static constexpr uint8_t dataMask = (1 << Width) - 1;
	static constexpr uint8_t portMask = dataMask << StartPin;

public:
	modm_always_inline static void setOutput() {
		DDR{{port["name"]}} |= portMask;
	}
	modm_always_inline static void setInput() {
		DDR{{port["name"]}} &= ~portMask;
	}
	inline static uint8_t read() {
		uint8_t data = modm::bitReverse(uint8_t(PIN{{port["name"]}} & portMask));
		return (data >> StartPinReversed);
	}
	inline static void write(uint8_t data) {
		data = modm::bitReverse(uint8_t(data << StartPinReversed));
		PORT{{port["name"]}} = (PORT{{port["name"]}} & ~portMask) | (data & portMask);
	}
	modm_always_inline static void toggle() {
	%% if notoggle
		PORT{{port["name"]}} ^= portMask;
	%% else
		PIN{{port["name"]}} = portMask;
	%% endif
	}
};
	%% if port["start"] == 0 and port["width"] == 8
template< ::modm::GpioPort::DataOrder DataOrder >
class GpioPortBase<Gpio::Port::{{port["name"]}}, 0, 8, DataOrder > : public Gpio
{
public:
	static constexpr uint8_t width = 8;

public:
	modm_always_inline static void setOutput() {
		DDR{{port["name"]}} = 0xff;
	}
	modm_always_inline static void setInput() {
		DDR{{port["name"]}} = 0;
	}
	modm_always_inline static uint8_t read() {
		return PIN{{port["name"]}};
	}
	modm_always_inline static void write(uint8_t data) {
		PORT{{port["name"]}} = data;
	}
	modm_always_inline static void toggle() {
		%% if notoggle
		PORT{{port["name"]}} ^= 0xff;
		%% else
		PIN{{port["name"]}} = 0xff;
		%% endif
	}
};
// another specialization for DataOrder::Reversed
template<>
class GpioPortBase<Gpio::Port::{{port["name"]}}, 0, 8, ::modm::GpioPort::DataOrder::Reversed > : public Gpio
{
public:
	static constexpr uint8_t width = 8;

public:
	modm_always_inline static void setOutput() {
		DDR{{port["name"]}} = 0xff;
	}
	modm_always_inline static void setInput() {
		DDR{{port["name"]}} = 0;
	}
	modm_always_inline static uint8_t read() {
		return modm::bitReverse(uint8_t(PIN{{port["name"]}}));
	}
	modm_always_inline static void write(uint8_t data) {
		PORT{{port["name"]}} = modm::bitReverse(data);
	}
	modm_always_inline static void toggle() {
		%% if notoggle
		PORT{{port["name"]}} ^= 0xff;
		%% else
		PIN{{port["name"]}} = 0xff;
		%% endif
	}
};
	%% endif

%% endfor
/// @endcond

}	// namespace platform

}	// namespace modm

#endif	// MODM_AVR_GPIO_PORT_HPP

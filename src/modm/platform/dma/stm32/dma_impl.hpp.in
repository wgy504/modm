/*
 * Copyright (c) 2014, Kevin LÃ¤ufer
 * Copyright (c) 2014, 2016, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32_DMA{{ id }}_HPP
#	error 	"Don't include this file directly, use 'dma_{{ id }}.hpp' instead!"
#endif

%% if target["family"] == "f4"
	%% set streams = range(0,8)
%% elif target["family"] == "f3"
	%% if id == 1
		%% set streams = range(1,7)
	%% elif id == 2
		%% set streams = range(1,5)
	%% endif
%% endif

void
modm::stm32::Dma{{ id }}::enable()
{
%% if target["family"] == "f4"
	RCC->AHB1ENR  |= RCC_AHB1ENR_DMA{{ id }}EN;
	RCC->AHB1RSTR |=  RCC_AHB1RSTR_DMA{{ id }}RST;
	RCC->AHB1RSTR &= ~RCC_AHB1RSTR_DMA{{ id }}RST;
%% elif target["family"] == "f3"
	RCC->AHBENR  |= RCC_AHBENR_DMA{{ id }}EN;
%% endif
}

void
modm::stm32::Dma{{ id }}::disable()
{
%% if target["family"] == "f4"
	RCC->AHB1ENR &= ~RCC_AHB1ENR_DMA{{ id }}EN;
%% elif target["family"] == "f3"
	RCC->AHBENR &= ~RCC_AHBENR_DMA{{ id }}EN;
%% endif

}


%% for stream_id in streams

%% if target["family"] == "f4"
	%% set stream = "DMA" ~ id ~ "_Stream" ~ stream_id
	%% set reg = stream ~ "->CR"
	%% set mem = stream ~ "->M0AR"
	%% set per = stream ~ "->PAR"
	%% set length = stream ~ "->NDTR"
	%% set prefix = "DMA_SxCR"
%% elif target["family"] == "f3"
	%% set channel = "DMA" ~ id ~ "_Channel" ~ stream_id
	%% set reg = channel ~ "->CCR"
	%% set mem = channel ~ "->CMAR"
	%% set per = channel ~ "->CPAR"
	%% set length = channel ~ "->CNDTR"
	%% set prefix = "DMA_CCR"
%% endif

%% set pointer_types = [8, 16, 32]
%% for type in pointer_types
void
modm::stm32::Dma{{ id }}::Stream{{ stream_id }}::setMemorySource(uint{{type}}_t* address,
	MemoryIncrementMode inc
%% if target["family"] == "f4"
, MemoryBurstTransfer transfer)
%% else
)
%% endif
{
	//stop();
	static constexpr MemoryDataSize size = MemoryDataSize::Bit{{type}};
	// a memory source could mean that either a memory-to-peripheral or a
	// memory-to-memory transfer is intended
	// we'll use the current transfer mode to determine what to do
	DataTransferDirection dir;
	if(getDataTransferDirection() == DataTransferDirection::MemoryToPeripheral) {
		dir = DataTransferDirection::MemoryToPeripheral;
		{{ mem }} = reinterpret_cast<uint32_t>(address);

	} else {
		dir = DataTransferDirection::MemoryToMemory;
		{{ per }} = reinterpret_cast<uint32_t>(address);
	}
	{{ reg }} = ({{ reg }} & ~memoryMask) | static_cast<uint32_t>(size)
		| static_cast<uint32_t>(inc)      | static_cast<uint32_t>(dir)
%% if target["family"] == "f4"
		| static_cast<uint32_t>(transfer);
%% else
		;
%% endif
}

void
modm::stm32::Dma{{ id }}::Stream{{ stream_id }}::setPeripheralSource(uint{{type}}_t* address,
	PeripheralIncrementMode inc
%% if target["family"] == "f4"
, PeripheralBurstTransfer transfer)
%% else
)
%% endif
{
	//stop();
	static constexpr PeripheralDataSize size = PeripheralDataSize::Bit{{type}};
	static constexpr DataTransferDirection dir = DataTransferDirection::PeripheralToMemory;
	{{ per }} = reinterpret_cast<uint32_t>(address);
	{{ reg }} = ({{ reg }} & ~peripheralMask) | static_cast<uint32_t>(size)
		| static_cast<uint32_t>(inc)          | static_cast<uint32_t>(dir)
%% if target["family"] == "f4"
		| static_cast<uint32_t>(transfer);
%% else
		;
%% endif
}
%% endfor

%% for type in pointer_types

void
modm::stm32::Dma{{ id }}::Stream{{ stream_id }}::setMemoryDestination(uint{{type}}_t* address,
	MemoryIncrementMode inc
%% if target["family"] == "f4"
, MemoryBurstTransfer transfer)
%% else
)
%% endif
{
	//stop();
	static constexpr MemoryDataSize size = MemoryDataSize::Bit{{type}};
	// a memory source could mean that either a memory-to-peripheral or a
	// memory-to-memory transfer is intended
	// we'll use the current transfer mode to determine what to do
	DataTransferDirection dir;
	if(getDataTransferDirection() == DataTransferDirection::PeripheralToMemory) {
		dir = DataTransferDirection::PeripheralToMemory;
		{{ mem }} = reinterpret_cast<uint32_t>(address);
	} else {
		dir = DataTransferDirection::MemoryToMemory;
		{{ mem }} = reinterpret_cast<uint32_t>(address);
	}
	{{ reg }} = ({{ reg }} & ~memoryMask) | static_cast<uint32_t>(size)
		| static_cast<uint32_t>(inc)      | static_cast<uint32_t>(dir)
%% if target["family"] == "f4"
		| static_cast<uint32_t>(transfer);
%% else
		;
%% endif
}


void
modm::stm32::Dma{{ id }}::Stream{{ stream_id }}::setPeripheralDestination(uint{{type}}_t* address,
	PeripheralIncrementMode inc
%% if target["family"] == "f4"
, PeripheralBurstTransfer transfer)
%% else
)
%% endif
{
	//stop();
	static constexpr PeripheralDataSize size = PeripheralDataSize::Bit{{type}};
	// if memory-to-memory mode was selected, the memory source
	// will have been saved in the Peripheral Register
	// in memory-to-peripheral mode, the memory source will
	// need to be saved in the Memory Register
	if(getDataTransferDirection() == DataTransferDirection::MemoryToMemory) {
		{{ mem }} = {{ per }};
	}
	static constexpr DataTransferDirection dir = DataTransferDirection::MemoryToPeripheral;
	{{ per }} = reinterpret_cast<uint32_t>(address);
	{{ reg }} = ({{ reg }} & ~peripheralMask) | static_cast<uint32_t>(size)
		| static_cast<uint32_t>(inc)          | static_cast<uint32_t>(dir)
%% if target["family"] == "f4"
		| static_cast<uint32_t>(transfer);
%% else
		;
%% endif
}
%% endfor

void
modm::stm32::Dma{{ id }}::Stream{{ stream_id }}::stop()
{
%% if target["family"] == "f4"
	{{ reg }} &= ~DMA_SxCR_EN;
	while({{ reg }} & DMA_SxCR_EN); // wait for stream to be stopped
%% else
	{{ reg }} &= ~DMA_CCR_EN;
	while({{ reg }} & DMA_CCR_EN); // wait for stream to be stopped
%% endif
}

void
modm::stm32::Dma{{ id }}::Stream{{ stream_id }}::configure(
%% if target["family"] == "f4"
	Channel channel,
%% endif
	uint16_t sample_length, Priority priority, CircularMode circular
%% if target["family"] == "f4"
	, FlowControl flow)
%% elif target["family"] == "f3"
	)
%% endif
{
	//stop();
	{{ reg }} = ({{ reg }} & ~configmask) | static_cast<uint32_t>(priority)
										  | static_cast<uint32_t>(circular)
%% if target["family"] == "f4"
		| static_cast<uint32_t>(channel) | static_cast<uint32_t>(flow);
%% else
		;
%% endif
	{{ length }} = sample_length;
}

void
modm::stm32::Dma{{ id }}::Stream{{ stream_id }}::start()
{
%% if target["family"] == "f4"
	{{ reg }} |= DMA_SxCR_EN;
%% else
	// clear interrupt flags
	DMA{{ id }}->ISR |= DMA_ISR_TEIF{{ stream_id }} |
						DMA_ISR_TCIF{{ stream_id }} |
						DMA_ISR_HTIF{{ stream_id }} |
						DMA_ISR_GIF{{ stream_id }};
	{{ reg }} |= DMA_CCR_EN;
%% endif
}

bool
modm::stm32::Dma{{ id }}::Stream{{ stream_id }}::isFinished()
{
%% if target["family"] == "f4"
	return !({{ reg }} & DMA_SxCR_EN);
%% else
	return (DMA{{ id }}->ISR & DMA_ISR_TCIF{{ stream_id }});
%% endif
}

modm::stm32::Dma{{ id }}::Stream{{ stream_id }}::DataTransferDirection
modm::stm32::Dma{{ id }}::Stream{{ stream_id }}::getDataTransferDirection()
{
	return static_cast<DataTransferDirection>(
%% if target["family"] == "f4"
		{{ reg }} & (DMA_SxCR_DIR_0 | DMA_SxCR_DIR_1));
%% else
		{{ reg }} & (DMA_CCR_MEM2MEM | DMA_CCR_DIR));
%% endif
}

%% endfor

/*
 * Copyright (c) 2012, 2016, Fabian Greif
 * Copyright (c) 2012, Sascha Schade
 * Copyright (c) 2012, 2014-2016, Niklas Hauser
 * Copyright (c) 2013-2014, Kevin Laeufer
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32_CLOCK_HPP
#define MODM_STM32_CLOCK_HPP

/**
 * @ingroup 	{{partname}}
 * @defgroup	{{partname}}_clock System Clock
 */

#include <stdint.h>
#include "../device.hpp"
#include "common_clock.hpp"

using namespace modm::clock;

namespace modm
{

namespace stm32
{

/**
 * Clock Control for STM32 devices.
 *
 * This class abstracts access to clock settings on the STM32.
 * You need to use this class to enable internal and external clock
 * sources & outputs, set PLL parameters and AHB & APB prescalers.
 * Don't forget to set the flash latencies.
 *
 * @author		Niklas Hauser
 * @ingroup		{{partname}}_clock
 */
class ClockControl
{
public:
	enum class
	PllSource : uint32_t
	{
%% if target["family"] in ["f2", "f4", "f7", "l4"]
		/// High speed internal clock (16 MHz)
		Hsi = RCC_PLLCFGR_PLLSRC_HSI,
		/// High speed external clock (see HseConfig)
		Hse = RCC_PLLCFGR_PLLSRC_HSE,
%% elif target["family"] in ["f0", "f3"]
		/// High speed internal clock (8 MHz)
	%% if target["name"] in ["302", "303", "398"] and target["size"] in ["d", "e"]
		Hsi = 0,
	%% else
		Hsi = RCC_CFGR_PLLSRC_HSI_DIV2,
	%% endif
		/// High speed external clock (see HseConfig)
		Hse = RCC_CFGR_PLLSRC_HSE_PREDIV,
%% elif target["family"] == "f1"
		/// High speed internal clock (8 MHz)
		Hsi = 0,
		/// High speed external clock (see HseConfig)
		Hse = RCC_CFGR_PLLSRC,
%% endif
%% if hsi48
		/// High speed internal clock (48 MHz)
		Hsi48 = RCC_CFGR_PLLSRC_HSI48_PREDIV,
		InternalClockMHz48 = Hsi48,
%% endif
%% if target["family"] in ["l4"]
		Msi = RCC_PLLCFGR_PLLSRC_MSI,
		MultiSpeedInternalClock = Msi,
%% endif

		InternalClock = Hsi,
		ExternalClock = Hse,
		ExternalCrystal = Hse,
	};

	enum class
	SystemClockSource : uint32_t
	{
		Hsi = RCC_CFGR_SW_HSI,
		Hse = RCC_CFGR_SW_HSE,
%% if hsi48
		Hsi48 = RCC_CFGR_SW_HSI48,
		InternalClockMHz48 = Hsi48,
%% endif

		InternalClock = Hsi,
		ExternalClock = Hse,
		ExternalCrystal = Hse,
		Pll = RCC_CFGR_SW_PLL,
	};

	enum class
	RealTimeClockSource : uint32_t
	{
		Lsi = RCC_BDCR_RTCSEL_1,
		Lse = RCC_BDCR_RTCSEL_0,
		Hse = RCC_BDCR_RTCSEL_0 | RCC_BDCR_RTCSEL_1,

		ExternalClock = Hse,
		ExternalCrystal = Hse,
		LowSpeedInternalClock = Lsi,
		LowSpeedExternalClock = Lse,
		LowSpeedExternalCrystal = Lse
	};

	enum class
	WatchdogClockSource : uint32_t
	{
		LowSpeedInternalClock = 0
	};

	enum class
	AhbPrescaler : uint32_t
	{
		Div1   = RCC_CFGR_HPRE_DIV1,
		Div2   = RCC_CFGR_HPRE_DIV2,
		Div4   = RCC_CFGR_HPRE_DIV4,
		Div8   = RCC_CFGR_HPRE_DIV8,
		Div16  = RCC_CFGR_HPRE_DIV16,
		Div64  = RCC_CFGR_HPRE_DIV64,
		Div128 = RCC_CFGR_HPRE_DIV128,
		Div256 = RCC_CFGR_HPRE_DIV256,
		Div512 = RCC_CFGR_HPRE_DIV512
	};

%% if target["family"] == "f0"
	enum class
	ApbPrescaler : uint32_t
	{
		Div1   = RCC_CFGR_PPRE_DIV1,
		Div2   = RCC_CFGR_PPRE_DIV2,
		Div4   = RCC_CFGR_PPRE_DIV4,
		Div8   = RCC_CFGR_PPRE_DIV8,
		Div16  = RCC_CFGR_PPRE_DIV16
	};
%% else
	enum class
	Apb1Prescaler : uint32_t
	{
		Div1   = RCC_CFGR_PPRE1_DIV1,
		Div2   = RCC_CFGR_PPRE1_DIV2,
		Div4   = RCC_CFGR_PPRE1_DIV4,
		Div8   = RCC_CFGR_PPRE1_DIV8,
		Div16  = RCC_CFGR_PPRE1_DIV16
	};

	enum class
	Apb2Prescaler : uint32_t
	{
		Div1   = RCC_CFGR_PPRE2_DIV1,
		Div2   = RCC_CFGR_PPRE2_DIV2,
		Div4   = RCC_CFGR_PPRE2_DIV4,
		Div8   = RCC_CFGR_PPRE2_DIV8,
		Div16  = RCC_CFGR_PPRE2_DIV16
	};
%% endif

%% if target["family"] in ["f2", "f4", "f7"]
	enum class
	ClockOutput1Source : uint32_t
	{
		InternalClock = 0,
		ExternalClock = RCC_CFGR_MCO1_1,
		ExternalCrystal = RCC_CFGR_MCO1_1,
		Pll = RCC_CFGR_MCO1_1 | RCC_CFGR_MCO1_0,
	};

	%% if not partname.startswith("stm32f412c")
	enum class
	ClockOutput2Source : uint32_t
	{
		SystemClock = 0,
		ExternalClock = RCC_CFGR_MCO2_1,
		ExternalCrystal = RCC_CFGR_MCO2_1,
		Pll = RCC_CFGR_MCO2_1 | RCC_CFGR_MCO2_0,
	};
	%% endif
%% elif target["family"] in ["l4"]
	enum class
	ClockOutputSource : uint32_t
	{
		Disable = 0,
		SystemClock = RCC_CFGR_MCOSEL_0, // SYSCLK
		MultiSpeedInternalClock = RCC_CFGR_MCOSEL_1, // MSI
		InternalClock = RCC_CFGR_MCOSEL_1 | RCC_CFGR_MCOSEL_0, // HSI16
		ExternalClock = RCC_CFGR_MCOSEL_2, // HSE
		ExternalCrystal = RCC_CFGR_MCOSEL_2, // HSE
		Pll = RCC_CFGR_MCOSEL_2 | RCC_CFGR_MCOSEL_0, // Main PLL
		// LSI
		// LSE
	};
%% else
	enum class
	ClockOutputSource : uint32_t
	{
		SystemClock   = RCC_CFGR_MCO_SYSCLK,
		InternalClock = RCC_CFGR_MCO_HSI,
		ExternalClock = RCC_CFGR_MCO_HSE,
		ExternalCrystal = RCC_CFGR_MCO_HSE,
	%% if target["family"] == "f0"
		InternalClockMHz14 = RCC_CFGR_MCO_HSI14,
	%% endif
	%% if hsi48
		InternalClockMHz48 = RCC_CFGR_MCO_HSI48,
	%% endif
	%% if target["family"] == "f1"
		Pll = RCC_CFGR_MCO_PLLCLK_DIV2,	///< divided by 2
	%% else
		Pll = RCC_CFGR_MCO_PLL,	///< divided by 2
	%% endif
	};
%% endif
%% if usbprescaler
	enum class
	UsbPrescaler : uint32_t
	{
		Div1 = RCC_CFGR_USBPRE,	///< do not divide
		Div1_5 = 0,	///< divide by 1.5
	};
%% endif
public:
	// sources
	static bool
	enableInternalClock(uint32_t waitCycles = 2048);

%% if target["family"] == "f0"
	static bool
	enableInternalClockMHz14(uint32_t waitCycles = 2048);
%% endif

%% if hsi48
	static bool
	enableInternalClockMHz48(uint32_t waitCycles = 2048);
%% endif

%% if target["family"] in ["l4"]
	enum class
	MsiFrequency : uint32_t
	{
		kHz100 = RCC_CR_MSIRANGE_0,
		kHz200 = RCC_CR_MSIRANGE_1,
		kHz400 = RCC_CR_MSIRANGE_2,
		kHz800 = RCC_CR_MSIRANGE_3,
		MHz1   = RCC_CR_MSIRANGE_4,
		MHz2   = RCC_CR_MSIRANGE_5,
		MHz4   = RCC_CR_MSIRANGE_6,
		MHz8   = RCC_CR_MSIRANGE_7,
		MHz16  = RCC_CR_MSIRANGE_8,
		MHz24  = RCC_CR_MSIRANGE_9,
		MHz32  = RCC_CR_MSIRANGE_10,
		MHz48  = RCC_CR_MSIRANGE_11,
	};

	static bool
	enableMultiSpeedInternalClock(MsiFrequency msi_frequency = MsiFrequency::MHz4, uint32_t waitCycles = 2048);
%% endif

	static bool
	enableExternalClock(uint32_t waitCycles = 2048);

	static bool
	enableExternalCrystal(uint32_t waitCycles = 2048);

	static bool
	enableLowSpeedInternalClock(uint32_t waitCycles = 2048);

	static bool
	enableLowSpeedExternalClock(uint32_t waitCycles = 2048);

	static bool
	enableLowSpeedExternalCrystal(uint32_t waitCycles = 2048);

	// plls
%% if target["family"] in ["f2", "f4", "f7", "l4"]
	/**
	 * Enable PLL.
	 *
	 * \code
	 * VCO input frequency = PLL input clock frequency / PLLM [with 2 ≤ PLLM ≤ 63]
	 * VCO output frequency = VCO input frequency × PLLN [with 64 ≤ PLLN ≤ 432]
	 * \endcode
	 *
	 * \param	source
	 * 		Source select for PLL and for plli2s. If you are using
	 * 		HSE you must enable it first (see enableHse()).
	 *
	 * \param	pllM
	 * 		Division factor for the main PLL (PLL) and
	 * 		audio PLL (PLLI2S) input clock (with 2 ≤ pllM ≤ 63).
	 *		The software has to set these bits correctly to ensure
	 *		that frequency of selected source divided by pllM
	 *		is in ranges from 1 to 2 MHz.
	 *
	 * \param	pllN
	 * 		Main PLL (PLL) multiplication factor for VCO (with 64 ≤ pllN ≤ 432).
	 * 		The software has to set these bits correctly to ensure
	 * 		that the VCO output frequency is
	 * 		 - 336 MHz for ST32F4. Core will run at 168 MHz.
	 *		 - 240 MHz for ST32F2. Core will run at 120 MHz.
	 *
	 * Example:
	 *
	 */
	static bool
	enablePll(PllSource source, uint8_t pllM,
					uint16_t pllN, uint8_t pllP, uint8_t pllQ, uint32_t waitCycles = 2048);
%% else
	static bool
	enablePll(PllSource source,
%% if usbprescaler
				UsbPrescaler usb,
%% endif
	%% if pllprediv2
				uint8_t pllMul, uint8_t pllPrediv, uint8_t pllPrediv2, uint32_t waitCycles = 2048);
	%% elif pllprediv
				uint8_t pllMul, uint8_t pllPrediv, uint32_t waitCycles = 2048);
	%% else
				uint8_t pllMul, uint32_t waitCycles = 2048);
	%% endif
%% endif

	// sinks
	static bool
	enableSystemClock(SystemClockSource src, uint32_t waitCycles = 2048);

	static inline bool
	enableRealTimeClock(RealTimeClockSource src)
	{
		RCC->BDCR = (RCC->BDCR & ~RCC_BDCR_RTCSEL) | RCC_BDCR_RTCEN | uint32_t(src);
		return true;
	}

	static inline bool
	enableWatchdogClock(WatchdogClockSource /*src*/)
	{ return true; }

%% if target["family"] in ["f2", "f4", "f7"]
	static inline bool
	enableClockOutput1(ClockOutput1Source src, uint8_t div)
	{
		uint32_t tmp = RCC->CFGR & ~(RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE);
		if (div > 1) tmp |= (div + 2) << 24;
		RCC->CFGR = tmp | uint32_t(src);
		return true;
	}

	%% if not partname.startswith("stm32f412c")
	static inline bool
	enableClockOutput2(ClockOutput2Source src, uint8_t div)
	{
		uint32_t tmp = RCC->CFGR & ~(RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE);
		if (div > 1) tmp |= (div + 2) << 27;
		RCC->CFGR = tmp | uint32_t(src);
		return true;
	}
	%% endif
%% elif target["family"] in ["l4"]
	enum class
	ClockOutputSourcePrescaler
	{
		Div1  = RCC_CFGR_MCOPRE_DIV1,
		Div2  = RCC_CFGR_MCOPRE_DIV2,
		Div4  = RCC_CFGR_MCOPRE_DIV4,
		Div8  = RCC_CFGR_MCOPRE_DIV8,
		Div16 = RCC_CFGR_MCOPRE_DIV16,
	};

	static inline bool
	enableClockOutput(ClockOutputSource src, ClockOutputSourcePrescaler div = ClockOutputSourcePrescaler::Div1)
	{
		RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_MCOSEL)) | uint32_t(src) | uint32_t(div);
		return true;
	}
%% else
	static inline bool
	enableClockOutput(ClockOutputSource src)
	{
		RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_MCO)) | uint32_t(src);
		return true;
	}
%% endif

public:
	static inline bool
	setAhbPrescaler(AhbPrescaler prescaler)
	{
		RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_HPRE) | uint32_t(prescaler);
		return true;
	}

%% if target["family"] == "f0"
	static inline bool
	setApbPrescaler(ApbPrescaler prescaler)
	{
		RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_PPRE) | uint32_t(prescaler);
		return true;
	}
%% else
	static inline bool
	setApb1Prescaler(Apb1Prescaler prescaler)
	{
		RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_PPRE1) | uint32_t(prescaler);
		return true;
	}

	static inline bool
	setApb2Prescaler(Apb2Prescaler prescaler)
	{
		RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_PPRE2) | uint32_t(prescaler);
		return true;
	}
%% endif

public:
	/** Set flash latency for CPU frequency and voltage.
	 * Does nothing if CPU frequency is too high for the available
	 * voltage.
	 *
	 * @returns maximum CPU frequency for voltage.
	 * @retval	<=CPU_Frequency flash latency has been set correctly.
	 * @retval	>CPU_Frequency requested frequency too high for voltage.
	 */
	static uint32_t
	setFlashLatency(const uint32_t CPU_Frequency, const uint16_t mV = 3300);

public:
	static inline uint32_t
	getCpuFrequency()
	{
		return modm::clock::fcpu;
	}

	static inline uint32_t
	getCpuFrequencykHz()
	{
		return modm::clock::fcpu_kHz;
	}

	static inline uint32_t
	getCpuFrequencyMHz()
	{
		return modm::clock::fcpu_MHz;
	}
};

}   // namespace stm32

}   // namespace modm

#endif	//  MODM_STM32_CLOCK_HPP
